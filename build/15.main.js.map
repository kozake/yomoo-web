{"version":3,"sources":["../../src/pages/account-setting/account-setting.module.ts","../../src/pages/account-setting/account-setting.ts"],"names":[],"mappings":"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","file":"15.main.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { AccountSettingPage } from './account-setting';\n\n@NgModule({\n  declarations: [\n    AccountSettingPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(AccountSettingPage),\n  ],\n  exports: [\n    AccountSettingPage\n  ]\n})\nexport class AccountSettingPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/account-setting/account-setting.module.ts","import { Component } from '@angular/core';\nimport { IonicPage, NavController, NavParams, AlertController } from 'ionic-angular';\nimport * as providers from '../../providers';\nimport * as services from '../../services'\n\n@IonicPage({\n  name: 'AccountSettingPage',\n  segment: 'account-setting'\n})\n@Component({\n  selector: 'page-account-setting',\n  templateUrl: 'account-setting.html',\n})\nexport class AccountSettingPage {\n\n  settingsAccount: any;\n\n  constructor(public navCtrl: NavController,\n              public navParams: NavParams,\n              public alertCtrl: AlertController,\n              private loading: providers.AppLoadingProvider,\n              private principal: providers.PrincipalProvider,\n              private acountresourceApi: services.AccountresourceApi\n            ) {\n    this.settingsAccount = {};\n  }\n\n  ionViewCanEnter(): Promise<boolean> {\n    return this.principal.identity().then(value => {\n      return value !== null;\n    })\n  }\n\n  ionViewDidLoad() {\n    this.principal.identity().then((account) => {\n      this.settingsAccount = this.copyAccount(account);\n    });\n  }\n\n  doSave() {\n\n    this.loading.start(() => {\n\n      return this.acountresourceApi.saveAccountUsingPOSTWithHttpInfo(this.settingsAccount).toPromise()\n      .then(() => {\n        \n        return this.principal.identity(true).then((account) => {\n          this.settingsAccount = this.copyAccount(account);\n          let alert = this.alertCtrl.create({\n            title: '情報',\n            subTitle: '保存しました',\n            buttons: ['OK']\n          });\n          alert.present();\n        });\n\n      }).catch((response) => {\n\n        let alert = this.alertCtrl.create({\n          title: 'エラー',\n          subTitle: '保存に失敗しました。',\n          buttons: ['OK']\n        });\n        alert.present();\n      });\n    });\n  }\n\n  private copyAccount(account) {\n    return {\n        activated: account.activated,\n        email: account.email,\n        firstName: account.firstName,\n        langKey: account.langKey,\n        lastName: account.lastName,\n        login: account.login,\n        imageUrl: account.imageUrl\n    };\n  }\n}\n\n\n// WEBPACK FOOTER //\n// ./src/pages/account-setting/account-setting.ts"],"sourceRoot":""}